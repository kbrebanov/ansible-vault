---
# tasks file for vault

- name: Include distribution specific variables
  include_vars: "{{ ansible_distribution }}.yml"
  tags:
    - vault

- include: CentOS.yml
  when: ansible_distribution == "CentOS"
  tags:
    - vault

- include: Ubuntu.yml
  when: ansible_distribution == "Ubuntu"
  tags:
    - vault

- name: Create Vault group
  group:
    name: "{{ vault_group }}"
    system: yes
    state: present
  tags:
    - vault

- name: Create Vault user
  become: yes
  user:
    name: "{{ vault_user }}"
    shell: /bin/false
    createhome: no
    group: "{{ vault_group }}"
    system: yes
    state: present
  tags:
    - vault

- name: Check if Vault is already installed
  stat:
    path: "{{ vault_install_dir }}/vault"
  register: vault_bin
  changed_when: false
  tags:
    - vault

- name: Get currently installed Vault version
  shell: "{{ vault_install_dir }}/vault version | grep '^Vault' | cut -d' ' -f2 | sed -e 's/^v//'"
  register: installed_vault_version
  when: vault_bin.stat.exists
  changed_when: false
  tags:
    - vault

- name: Get list of installed Vault files
  shell: ls -1 {{ vault_install_dir }}/vault*
  register: vault_files
  when: not installed_vault_version | skipped
  changed_when: false
  tags:
    - vault

- name: Download Vault
  become: yes
  get_url:
    url: "{{ vault_url }}"
    dest: "{{ vault_download_dir }}/vault.zip"
    sha256sum: "{{ vault_sha256sum }}"
  tags:
    - vault

- name: Remove Vault files if version is different
  become: yes
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ vault_files.stdout_lines | default([]) }}"
  when:
    - not installed_vault_version | skipped
    - installed_vault_version.stdout | version_compare(vault_version, operator='lt', strict=True)
  notify:
    - restart vault
  tags:
    - vault

- name: Unzip Vault to installation directory
  become: yes
  unarchive:
    src: "{{ vault_download_dir }}/vault.zip"
    dest: "{{ vault_install_dir }}"
    creates: "{{ vault_install_dir }}/vault"
    copy: no
  tags:
    - vault

- name: Create Vault configuration directory
  become: yes
  file:
    path: "{{ vault_config_dir }}"
    owner: root
    group: root
    mode: 0755
    state: directory
  tags:
    - vault

- name: Create Vault upstart configuration
  become: yes
  template:
    src: vault.conf.j2
    dest: /etc/init/vault.conf
    owner: root
    group: root
    mode: 0644
  notify:
    - restart vault
  tags:
    - vault
  when: ansible_service_mgr == "upstart"

- name: Create Vault systemd configuration
  become: yes
  template:
    src: vault.service.j2
    dest: /lib/systemd/system/vault.service
    owner: root
    group: root
    mode: 0644
  notify:
    - restart vault
  tags:
    - vault
  when: ansible_service_mgr == "systemd"

- name: Create Vault configuration file
  become: yes
  template:
    src: vault.hcl.j2
    dest: "{{ vault_config_dir }}/vault.hcl"
    owner: root
    group: vault
    mode: 0640
  notify:
    - restart vault
  tags:
    - vault

- name: Give vault access to mlock syscall
  become: yes
  capabilities:
    path: "{{ vault_install_dir }}/vault"
    capability: 'cap_ipc_lock+ep'
    state: present
  tags:
    - vault

- name: Ensure Vault service is started and enabled on boot
  become: yes
  service:
    name: "{{ vault_service_name }}"
    state: started
    enabled: yes
  tags:
    - vault
